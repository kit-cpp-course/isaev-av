#pragma once

#include <string>
#include <exception>

//  ласс, отвечающий за взаимодействи€ с пользователем.
class Menu
{
	// ’ранит булево значение, определ€ющее, записан ли путь с прежнему каталогу. 
	bool haveOldDir = false;

	// ’ранит булево значение, определ€ющее, записан ли путь с новому каталогу. 
	bool haveNewDir = false;

	// —трока, хран€ща€ путь к прежнему каталогу с файлами.
	std::string oldDirectory;

	// —трока, хран€ща€ путь к новому каталогу, куда будут перемещены файлы.
	std::string newDirectory;

	// «аписывает путь к прежнему каталогу, получа€ данные из аргумента командной строки.
	void writeDownOldDirectory(char * oldDir) { oldDirectory = oldDir;  haveOldDir = true; }

	// «аписывает путь к новому каталогу, получа€ данные из аргумента командной строки.
	void writeDownNewDirectory(char * newDir) { newDirectory = newDir; haveNewDir = true; }

	// ¬ыводит сообщение о просьбе ввести путь к прежнему каталогу и записывает введенную информацию в соотв.поле.
	void enterOldDirMessage();

	// ¬ыводит сообщение о просьбе ввести путь к новому каталогу и записывает введенную информацию в соотв.поле. 
	void enterNewDirMessage();

public:
	// «аписывает пути к наталогам на основе аргументов командной строки или введенных пользователем данных.
	// —ледующий аргумент после "-old" записываетс€ как путь к прежнему каталогу.
	// —ледующий аргумент после "-new" записываетс€ как путь к новому каталогу.
	// ѕри отсутствии вышеназванных аргументов или их общем кол-ве больше 4 пользователю предлагаетс€ вручную ввести недостающие данные.
	void getAllPaths(int argc, char * argv[]);

	// ¬озвращает путь к прежнему каталогу.
	std::string getOldDiretory() { return oldDirectory; }

	// ¬озвращает путь к новому каталогу.
	std::string getNewDiretory() { return newDirectory; }

	// ¬ыводит сообщение об успешном окончании работы программы.
	void endMessage();

	// ¬ыводит сообщение об ошибке.
	void showErrorMessage(const std::exception& exc);
};

